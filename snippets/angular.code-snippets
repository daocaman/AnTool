{
    "Angular service file": {
        "prefix": "!angService",
        "body": [
            "path: string = '$1';",
            "",
            "endpoints = {",
            "$2",
            "};",
            "",
            "constructor(private _api: ApiService) { }"
        ],
        "description": "Angular service requirement"
    },
    "API service": {
        "prefix": "!angApiService",
        "body": [
            "apiServer: string = environment.apiServer;",
            "constructor(private http: HttpClient) { }",
            "",
            "/**",
            "* REQUEST API",
            "* METHOD POST",
            "*",
            "* @param {string} path",
            "* @param {string} endpoint",
            "* @param {*} [data={}]",
            "* @returns {Observable<any>}",
            "* @memberof ApiService",
            "*/",
            "get(path: string, endpoint: string, data: any = {}) {",
            "   return this.http.get(url.merge(this.apiServer, path, endpoint, data));",
            "}",
            "/**",
            "* ",
            "* REQUEST API",
            "* METHOD DELETE",
            "* ",
            "* @param {string} path",
            "* @param {string} endpoint",
            "* @param {*} [data={}]",
            "* @returns {Observable<any>}",
            "* @memberof ApiService",
            "* ",
            "* ",
            "*/",
            "",
            "delete(path: string, endpoint: string, data: any = {}) {",
            "   return this.http.delete(url.merge(this.apiServer, path, endpoint, data));",
            "}",
            "/**",
            "* REQUEST API",
            "* METHOD POST",
            "*",
            "* @param {string} path",
            "* @param {string} endpoint",
            "* @param {*} [data={}]",
            "* @param {*} [options={}]",
            "* @returns",
            "* @memberof ApiService",
            "*/",
            "post(path: string, endpoint: string, data: any = {}, options: any = null) :Observable<any>{",
            "   let httpOptions;",
            "   if (!options || options.type != 'multipart/form-data') {",
            "       httpOptions = {",
            "           headers: new HttpHeaders({",
            "               'Content-Type': (options && options.type) ? options.type : 'application/json'",
            "           }),",
            "           responseType: 'json'",
            "       };",
            "   } else {",
            "       httpOptions = {",
            "           headers: new HttpHeaders({}),",
            "           responseType: 'json'",
            "       };",
            "   }",
            "   return this.http.post(url.merge(this.apiServer, path, endpoint), data, httpOptions);",
            "}",
            "/**",
            "* REQUEST API",
            "* METHOD PUT",
            "* @param {string} path",
            "* @param {string} endpoint",
            "* @param {*} data",
            "* @param {*} [options]",
            "* @returns {Observable<any>}",
            "* @memberof ApiService",
            "*/",
            "put(path: string, endpoint: string, data: any, options?: any): Observable<any> {",
            "   const httpOptions = {",
            "       headers: new HttpHeaders({",
            "           'Content-Type': (options && options.type) ? options.type : 'application/json',",
            "       })",
            "   };",
            "   return this.http.put(url.merge(this.apiServer, path, endpoint), data, httpOptions);",
            "}",
            "/**",
            "* REQUEST API FOR FILE DATA",
            "* METHOD POST",
            "* @param {string} path",
            "* @param {string} endpoint",
            "* @param {*} data",
            "* @param {*} options",
            "* @returns {Observable<any>}",
            "* @memberof ApiService",
            "*/",
            "file(path: string, endpoint: string, data: any, options: any): Observable<any> {",
            "   return this.http.post(url.merge(this.apiServer, path, endpoint), data, options);",
            "}",
            "/**",
            "* Convert json to urlencoded",
            "* ",
            "* @static",
            "* @param {*} data",
            "* @returns",
            "* @memberof ApiService",
            "*/",
            "public static convertToFormUrlencoded(data) {",
            "   return Object.keys(data).map(key => {",
            "       return key + '=' + encodeURIComponent(data[key]);",
            "   }).join('&');",
            "}",
            "/**",
            "* Convert json to query string",
            "*",
            "* @static",
            "* @param {string} url",
            "* @param {*} data",
            "* @returns",
            "* @memberof ApiService",
            "*/",
            "public static convertToQueryString(url: string, data: any) {",
            "   const query = Object.keys(data).map(key => key + '=' + encodeURIComponent(data[key])).join('&');",
            "   return url + '?' + query;",
            "}",
        ],
        "description": "Angular api service"
    },
    "Dialog service": {
        "prefix": "!angDlogService",
        "body": [
            "export interface option {",
            "   class?: string,",
            "   initialState?: any,",
            "}",
            "",
            "@Injectable({",
            "   providedIn: 'root'",
            "})",
            "export class DialogService {",
            "   modalRef: BsModalRef;",
            "   constructor(private modalService: BsModalService) { }",
            "",
            "   // Bootstrap Dialog",
            "   openModal(template: any, data: option = null) {",
            "       this.modalRef = this.modalService.show(template, data);",
            "   }",
            "",
            "   hideModal() {",
            "       this.modalRef.hide();",
            "   }",
            "}",
        ],
        "description": "Angular dialog service (ngx-bootstrap)"
    },
    "Cookie helper": {
        "prefix": "!angCookie",
        "body": [
            "/**",
            "* Get cookie by key",
            "*",
            "* @export",
            "* @param {*} key",
            "* @returns",
            "*/",
            "export function get(key) {",
            "   let cookies = document.cookie;",
            "   let array = cookies.split(';').filter(",
            "       str => {",
            "           let arr = str.trim().split('=');",
            "           return arr[0] == key;",
            "   });",
            "   if (!array || array.length <= 0) {",
            "       return '';",
            "   }",
            "   return decodeURIComponent(array[0].trim().split('=')[1]);",
            "",
            "}",
            "/**",
            "* Set cookie with key = value;expires=times",
            "*",
            "* @export",
            "* @param {*} name",
            "* @param {*} value",
            "* @param {number} [seconds=0]",
            "*/",
            "export function set(name, value, seconds = 0) {",
            "   let cookie = `${name}=${encodeURIComponent(value)}`;",
            "   let expires = (seconds) ? `; expires=${seconds.toString()}` : '';",
            "   let path = `; path =/`;",
            "   document.cookie = (`${cookie}${expires}${path}`);",
            "}",
            "/**",
            "* Remove cookie by key",
            "*",
            "* @export",
            "* @param {*} key",
            "*/",
            "export function remove(key) {",
            "   document.cookie = `${key}=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/;`",
            "}",
        ],
        "description": "Angular cookie helper"
    },
    "Url helper": {
        "prefix": "!angUrlHelper",
        "body": [
            "/**",
            "* Object to Query String",
            "*",
            "* @export",
            "* @param {*} [params={}]",
            "* @returns",
            "*/",
            "export function query(params: any = {}) {",
            "   if (params && Object.keys(params).length > 0) {",
            "       return `?${Object.keys(params).filter(key => {",
            "           return (params[key] && params[key] != 'null');",
            "       }).map(key => {",
            "           return [key, encodeURIComponent(params[key])].join('=');",
            "       }).join('&')}`;",
            "   } else {",
            "       return '';",
            "   }",
            "}",
            "/**",
            "* return url: domain/path/endpoint?query",
            "*",
            "*@export",
            "*@param {*} domain",
            "* @param {*} path",
            "* @param {*} endpoint",
            "* @param {*} [queryParams=null]",
            "* @returns",
            "*/",
            "export function merge(domain, path, endpoint, queryParams = null) {",
            "   if (path) {",
            "       return `${domain}/${path}/${endpoint}${query(queryParams)}`;",
            "   } else {",
            "       return `${domain}/${endpoint}${query(queryParams)}`;",
            "   }",
            "}",
        ],
        "description": "Angular url helper"
    },
    "ResponseData interface": {
        "prefix": "!angResponseInter",
        "body": [
            "export interface ResponseData {",
            "   meta?: {",
            "       current_page: number",
            "       num_pages: number",
            "       num_per_page: number",
            "       total: number",
            "   },",
            "   data?: Array<any>,",
            "   value?: any,",
            "   messages?: string",
            "}",
        ],
        "description": "RespondData interface"
    },
    "Pagination interface": {
        "prefix": "!angPageInter",
        "body": [
            "export interface PaginationOption {",
            "   total: number,",
            "   num_pages: number,",
            "   current_page: number,",
            "   num_per_page: number",
            "}",
        ],
        "description": "Pagination interface"
    },
    "Modal component": {
        "prefix": "!angModalCom",
        "body": [
            "value: ${1:any};",
            "",
            "submitCall: any;",
            "",
            "constructor(",
            "   private bsModalRef: BsModalRef,",
            "   private _${2:service}: ${3:Service}",
            ") { }",
            "",
            "closeModal() {",
            "   this.bsModalRef.hide();",
            "}",
        ],
        "description": "Angular modal component"
    },
    "Service function": {
        "prefix": "!angServiceFnct",
        "body": [
            "${1:functcionname}($2}) {",
            "   return this._api.${3|get,delete,post,put,file|}(this.path, this.endpoints.${4:name}$5);",
            "}"
        ],
        "description": "Angular service function"
    },
    "Form object": {
        "prefix": "!angFormObj",
        "body": [
            "${1:nameForm}: FormGroup = new FormGroup({",
            "   ${2:control1}: new FormControl(${3| ,''|},${4| ,Validators.required|}),",
            "})",
        ],
        "description": "Angular formgroup"
    },
    "Routing layout": {
        "prefix": "!angRouteLayout",
        "body": [
            "import { RouterModule, Routes } from '@angular/router';",
            "const routes: Routes = [",
            "   {",
            "       path: '',",
            "       component: ${1:component1},",
            "       children: [",
            "           {",
            "               path: '',",
            "               pathMatch: 'full',",
            "               component: ${2:component2}",
            "           },",
            "           {",
            "               path: '${3:path1}',",
            "               component: ${2:component2}",
            "           },",
            "           {",
            "               path: '${4:path2}',",
            "               loadChildren: () => import('${5:module}').then(m => m.${6:module})",
            "           },",
            "           {",
            "               path: '**',",
            "               redirectTo: '${3:path1}'",
            "           }",
            "       ]",
            "   }",
            "]",
        ],
        "description": "Angular routing layout"
    },
    "Routing common": {
        "prefix": "!angRouteCommon",
        "body": [
            "import { RouterModule, Routes } from '@angular/router';",
            "const routes: Routes = [",
            "   {",
            "       path: '',",
            "       component: ${1:component1}",
            "   },",
            "   {",
            "       path: '${2:path1}',",
            "       component: ${3:component2}",
            "   }",
            "]",
        ],
        "description": "Angular routing common"
    },
    "Route to component":{
        "prefix": "!angRouteComponent",
        "body": [
            "{",
            "   path: '${1:path}',",
            "   component: ${2:component}",
            "}",
        ],
        "description": "Angular route to component"
    },
    "Route to module":{
        "prefix": "!angRouteModule",
        "body": [
            "{",
            "   path: '${1:path}',",
            "   loadChildren: () => import('${2:module}').then(m => m.${3:module})",
            "},",
        ],
        "description": "Angular routing to module (lazy load)"
    },
    "Angular ngFor": {
        "prefix": "!angNgFor",
        "body": "*ngFor=\"let ${1:item} of ${2:items}; index as ${3:i};\"",
        "description": "Angular ngFor"
    },
    "Angular ngIf": {
        "prefix": "!angNgIf",
        "body": "*ngIf=\"${1:condition}\"",
        "description": "Angular ngIf"
    },
    "Angular ngClass": {
        "prefix": "!angNgClass",
        "body": "[ngClass]=\"{'${1:class1}': ${2:condition}, '${3:class2}':  ${4:condition} }\"",
        "description": "Angular ngClass"
    },
    "angular ngStyle": {
        "prefix": "!angNgStyle",
        "body": "[ngStyle]=\"{${1:attr1}: ${2:condition}? ${3:op1}: ${4:op2}}\"",
        "description": "Angular ngStyle"
    },
    "angular router-link": {
        "prefix": "!angRouterLink",
        "body": "[routerLink]=\"['${1:route}',${2:param1}]\"",
        "description": "Angular router link"
    },
    "angular attribute": {
        "prefix": "!angAttribute",
        "body": "[attr.${1:attributename}]=\"${2:value}\"",
        "description": "Angular attribute"
    },
    "angular formGroup": {
        "prefix": "!angFormGroup",
        "body": "[formGroup]=\"${1:formname}\"",
        "description": "Angular formGroup"
    },
    "angular formControl": {
        "prefix": "!angFormControl",
        "body": "formControlName=\"${1:name}\"",
        "description": "Angular formcontrol"
    },
    "angular translate/pipe": {
        "prefix": "!angPipe",
        "body": "{{${1:value}|${2:translate}}}",
        "description": "Angular pipe value"
    },
    "angular modal": {
        "prefix": "!angModal",
        "body": [
            "<div class=\"modal-header\">",
            "<button (click)=\"closeModal()\" type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">",
            "    <span aria-hidden=\"true\">×</span>",
            "</button>",
            "<h4 class=\"modal-title\">",
            "    $1",
            " </h4>",
            "</div>",
            "<div class=\"modal-body\">",
            " $2 ",
            "</div>",
            "<div class=\"modal-footer\">",
            "    <button (click)=\"closeModal()\" type=\"button\" class=\"btn btn-default\" data-dismiss=\"modal\">Close</button>",
            "</div>",
        ],
        "description": "Angular modal"
    },
    "angular pagination option": {
        "prefix": "!angPaginationOption",
        "body": [
            "paginationOption: PaginationOption = {",
            "    current_page: 1,",
            "    num_pages: 10,",
            "    num_per_page: 10,",
            "    total: 1000",
            "  };",
            "handleChangePage(data: PaginationOption){}"
        ],
        "description": "Angular pagination option"
    },
    "angular using modal": {
        "prefix": "!angUseModal",
        "body": "this._modal.openModal(${1:ChangePassComponent}, {initialState: {}});",
        "description": "Angular using modal"
    },
    "angular template pagination": {
        "prefix": "!angPageTemplate",
        "body": "<app-pagination [paginationOption]=\"paginationOption\" (onPageChange)=\"handleChangePage($event) \">",
        "description": "Angular pagination component"
    }
}