{
    "Express server.js": {
        "prefix": "!expServer1.js",
        "body": [
            "const http = require('http');",
            "const app = require('./app');",
            "",
            "const port = process.env.PORT || ${1:3000};",
            "",
            "const server = http.createServer(app);",
            "",
            "server.listen(port);",
        ],
        "description": "Express generate server.js"
    },
    "Express app.js": {
        "prefix": "!expApp.js",
        "body": [
            "const express = require('express');",
            "const app = express();",
            "const bodyParser = require('body-parser');",
            "const logger = require('morgan');",
            "",
            "app.use(bodyParser.json()) // for parsing application/json",
            "app.use(bodyParser.urlencoded({ extended: true })) // for parsing application/x-www-form-urlencoded",
            "",
            "app.use((req, res, next) => {",
            "    res.header(\"Access-Control-Allow-Origin\", \"*\");",
            "    res.header(",
            "        \"Access-Control-Allow-Headers\",",
            "        \"Origin, X-Requested-With, Content-Type, Accept, Authorization,  X-Access-Token\"",
            "    );",
            "    if (req.method === 'OPTIONS') {",
            "        res.header('Access-Control-Allow-Methods', 'PUT, POST, PATCH, DELETE, GET');",
            "        return res.status(200).json({});",
            "   }",
            "   next();",
            "});",
            "",
            "// config sequelize, db",
            "const sequelize = require(\"./configurations/Squelize-config\");",
            "sequelize.sync();",
            "",
            "module.exports = app;"
        ],
        "description": "Express app.js"
    },
    "New Controller": {
        "prefix": "!expCon",
        "body": [
            "const ${1:tb} = require(\"../models/${1:tb}\"); //${1:tb} tablename",
            "",
            "let nameController = \"${2:nameController}\";",
            "",
            "${2:nameController} = {",
            "",
            "};",
            "",
            "",
            "module.exports = ${2:nameController}",
        ],
        "description": "Express API Controller"
    },
    "Express route module": {
        "prefix": "!expRoute",
        "body": [
            "// lib",
            "const express = require('express');",
            "const router = express.Router();",
            "",
            "// controllers",
            "const ${1:controllername} = require('../controllers/${1:controllername}');",
            "",
            "// middleware",
            "",
            "// helpers",
            "",
            "module.exports = router;"
        ],
        "description": "Routing in express"
    },
    "Function controller": {
        "prefix": "!expFnctCon",
        "body": [
            "",
            "/**",
            "* @name ${1:function1}",
            "* @param {${2|String,number,Date,Object|}} ${3:param1}",
            "* @returns ${4:object}",
            "* @description ${5:object}",
            " */",
            "${6:controller}.${1:function1} = async(${3:param1} = null) => {",
            "",
            "    console.log(\"\\x1b[34m function ${1:function1} : \\x1b[0m\" + nameController);",
            "",
            "    let responseData = { messages: \"\", code: 500 };",
            "",
            "    let flag = false;",
            "",
            "    try {",
            "        $7",
            "",
            "    } catch (error) {",
            "        flag = true;",
            "        if(error.code){",
            "            responseData.messages = error.messages ? error.messages: error;",
            "            responseData.code = error.code ? error.code: responseData.code;",
            "        }else{",
            "            responseData.messages = error;",
            "        }",
            "    }",
            "",
            "    if (flag) {",
            "        throw(responseData);",
            "    } else {",
            "       return responseData;",
            "    }",
            "",
            "}",
        ],
        "description": "Api Controller function"
    },
    "Attribute Object": {
        "prefix": "!expAttr",
        "body": [
            "${1:field}: ${2|null,'',{}|},"
        ],
        "description": "Attribute for object"
    },
    "Return Promise": {
        "prefix": "!expReturnPromise",
        "body": [
            "return new Promise((resolve, reject) => {",
            "    $1",
            "});",
        ],
        "description": "Return Promise"
    },
    "Return if-else async": {
        "prefix": "!expReturn",
        "body": [
            "if (flag) {",
            "   throw(responseData);",
            "} else {",
            "   return responseData;",
            "}",
        ]
    },
    "http api": {
        "prefix": "!expCRUD",
        "body": [
            "//${1:decription}",
            "router.${2|get,post,put,delete|}('${3:path}', ((req, res, next) => {",
            "   console.log('\\x1b[44m====== ~ ${3:path} api ~ ===================================\\x1b[0m');",
            "   ${4:controller}.${5:function}.then(",
            "       data => {",
            "           res.status(200).json(data);",
            "           console.log('\\x1b[44m====== ~ end ${3:path} api ~ ===================================\\x1b[0m');",
            "       }, err => {",
            "          if(err.code){",
            "               res.status(err.code).json({messages: err.messages});",
            "           }else{",
            "               res.status(500).json(err);",
            "           }",
            "           console.log('\\x1b[41m====== ~ end Error ${3:path} api ~ ===================================\\x1b[0m');",
            "       }",
            "   )",
            "}));",
        ],
        "description": "HTTP (POST, GET, DELETE, PUT,...)"
    },
    "Express using route": {
        "prefix": "!expUseRoute",
        "body": [
            "// routing ${1:route1}",
            "const ${2:route} = require('./routes/${3:route1}');",
            "app.use('/${4:route}', ${2:route});",
            "",
        ],
        "description": "Express using route"
    },
    "Express require": {
        "prefix": "!expRequire",
        "body": [
            "const ${2:var1} = require('${1:link}');"
        ],
        "description": "Express require module"
    },
    "Express request data": {
        "prefix": "!expReqData",
        "body": "let reqData = req.${1|params,body,query,{},'',[]|};",
        "description": "Express request data"
    },
    "Response data": {
        "prefix": "!expResponseData",
        "body": "responseData = {messages: 'Success.'};",
        "description": "Response success data"
    },
    "Response data custom": {
        "prefix": "!expResponseCustom",
        "body": "responseData={${1|messages,data,value|}: ${2:data} };",
        "description": "Respond custom data"
    },
    "Response error data": {
        "prefix": "!expErrResponse",
        "body": [
            "flag = true;",
            "responseData = { code:  ${1|500,404,400,403|}, messages: '${2:Missing value.}' };"
        ],
        "description": "Respond error data"
    },
    "Debug": {
        "prefix": "debug",
        "body": [
            "//debug",
            "console.log('\\x1b[33m ${1:item} :\\x1b[0m',${2:item});"
        ],
        "description": "Debuging"
    },
    "Debug break": {
        "prefix": "debugBreak",
        "body": [
            "console.log('\\x1b[42m\\x1b[30m====== ~ ${1:information} ~ ===================================\\x1b[0m');",
        ]
    },
    "Comment function": {
        "prefix": "cmtFunct",
        "body": [
            "",
            "/**",
            "* @name ${1:function1}",
            "* @param {object} ${2:param1}",
            "* @param {object} ${3:param2}",
            "* @returns $4",
            "* @description $5",
            " */",
        ],
        "description": "Commnent for function"
    },
    "Type docs": {
        "prefix": "!genTypeDoc",
        "body": [
            /** ${1:description}
            * @typedef {Object} ${2:nameType}
            * @property {${3|String,number,object|}} ${4:nameProp}
            */
        ],
        "description": "Generate type doc"
    },
    "Property docs": {
        "prefix": "!genPropDoc",
        "body": "@property {${1|String,number,object|}} ${2:nameProp}",
        "description": "Property doc"
    }
}